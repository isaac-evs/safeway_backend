name: Build, Package and Deploy

on:
  push:
    branches: [master]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: safeway-backend
  ASG_NAME: asg-ec2-instances-safeway

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          pip install pytest
          # Run tests if you have them
          # pytest

  package:
    name: Package and Push to ECR
    needs: build
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "::set-output name=image-tag::$IMAGE_TAG"

  deploy:
    name: Deploy to Auto Scaling Group
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create or Update IAM Role for EC2
        run: |
          # Check if role exists
          if ! aws iam get-role --role-name EC2ECRAccessRole 2>/dev/null; then
            # Create the role
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }' > trust-policy.json

            # Create the role
            aws iam create-role --role-name EC2ECRAccessRole --assume-role-policy-document file://trust-policy.json

            # Create instance profile and add role to it
            aws iam create-instance-profile --instance-profile-name EC2ECRAccessProfile
            aws iam add-role-to-instance-profile --instance-profile-name EC2ECRAccessProfile --role-name EC2ECRAccessRole

            # Wait for role to propagate
            sleep 10
          fi

          # Create policy for Parameter Store access
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ssm:GetParameter",
                  "ssm:GetParameters",
                  "ssm:GetParametersByPath"
                ],
                "Resource": "arn:aws:ssm:us-east-2:135808947723:parameter/safeway-backend/*"
              }
            ]
          }' > parameter-store-policy.json

          # Create policy for ECR access
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage"
                ],
                "Resource": "*"
              }
            ]
          }' > ecr-policy.json

          # Create or update the policies
          aws iam put-role-policy --role-name EC2ECRAccessRole --policy-name ParameterStoreAccess --policy-document file://parameter-store-policy.json
          aws iam put-role-policy --role-name EC2ECRAccessRole --policy-name ECRAccess --policy-document file://ecr-policy.json

      - name: Create new Launch Template version
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.package.outputs.image-tag }}
          LAUNCH_TEMPLATE_NAME: safeway-backend-template
          LAUNCH_TEMPLATE_VERSION: ${{ github.run_number }}
          SECURITY_GROUP_ID: "sg-078cab6efbbca7f8f"
        run: |
          # Create user data script with improved error handling and correct package names for Ubuntu 24.04
          cat > user-data.sh << 'EOF'
          #!/bin/bash

          # Enable error logging
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo "Starting user data script execution"

          # Update and install packages with proper error handling
          echo "Updating package lists..."
          apt-get update

          echo "Installing Docker..."
          apt-get install -y docker.io
          if [ $? -ne 0 ]; then
            echo "Docker installation failed, trying alternative approach"
            # Try snap as fallback
            apt-get install -y snapd
            snap install docker
          fi

          echo "Starting Docker service..."
          systemctl start docker
          systemctl enable docker

          echo "Installing AWS CLI..."
          # Install AWS CLI v2 using the official method
          apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install

          # Verify installation
          /usr/local/bin/aws --version

          # Add ubuntu user to docker group
          groupadd -f docker
          usermod -aG docker ubuntu

          # Wait for AWS CLI and Docker to be fully available
          sleep 5

          echo "Logging in to ECR..."
          # Login to ECR with error handling
          /usr/local/bin/aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 135808947723.dkr.ecr.us-east-2.amazonaws.com
          if [ $? -ne 0 ]; then
            echo "Failed to login to ECR, retrying after short delay"
            sleep 10
            /usr/local/bin/aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 135808947723.dkr.ecr.us-east-2.amazonaws.com
            if [ $? -ne 0 ]; then
              echo "ECR login failed again"
              exit 1
            fi
          fi

          echo "Pulling latest image..."
          # Pull the latest image with error handling
          docker pull 135808947723.dkr.ecr.us-east-2.amazonaws.com/safeway-backend:latest
          if [ $? -ne 0 ]; then
            echo "Failed to pull image"
            exit 1
          fi

          # Stop any existing container
          docker stop safeway-backend || true
          docker rm safeway-backend || true

          echo "Retrieving environment variables from Parameter Store..."
          # Get parameters from SSM Parameter Store
          DATABASE_URL=$(/usr/local/bin/aws ssm get-parameter --name "/safeway-backend/DATABASE_URL" --with-decryption --query "Parameter.Value" --output text --region us-east-2)
          SECRET_KEY=$(/usr/local/bin/aws ssm get-parameter --name "/safeway-backend/SECRET_KEY" --with-decryption --query "Parameter.Value" --output text --region us-east-2)

          echo "Running container..."
          # Run the new container with environment variables
          docker run -d --name safeway-backend -p 80:8000 \
            -e DATABASE_URL="$DATABASE_URL" \
            -e SECRET_KEY="$SECRET_KEY" \
            135808947723.dkr.ecr.us-east-2.amazonaws.com/safeway-backend:latest

          if [ $? -ne 0 ]; then
            echo "Failed to start container with environment variables"
            # Try running with debugging to capture errors
            docker run --name safeway-backend-debug \
              -e DATABASE_URL="$DATABASE_URL" \
              -e SECRET_KEY="$SECRET_KEY" \
              135808947723.dkr.ecr.us-east-2.amazonaws.com/safeway-backend:latest > /var/log/container-debug.log 2>&1 &

            sleep 5
            echo "Debug container logs:"
            cat /var/log/container-debug.log
            exit 1
          fi

          echo "Container started successfully"
          EOF

          # Encode user data to base64
          USER_DATA=$(base64 -w 0 user-data.sh)

          # Create a new launch template version with public IP, security group, and IAM profile
          aws ec2 create-launch-template-version \
            --launch-template-name ${LAUNCH_TEMPLATE_NAME} \
            --version-description "Automated deployment ${LAUNCH_TEMPLATE_VERSION}" \
            --launch-template-data "{
              \"ImageId\":\"ami-04f167a56786e4b09\",
              \"InstanceType\":\"t2.micro\",
              \"KeyName\":\"safeway-asg\",
              \"UserData\":\"${USER_DATA}\",
              \"NetworkInterfaces\":[{
                \"DeviceIndex\":0,
                \"AssociatePublicIpAddress\":true,
                \"Groups\":[\"${SECURITY_GROUP_ID}\"],
                \"DeleteOnTermination\":true
              }],
              \"IamInstanceProfile\": {
                \"Name\": \"EC2ECRAccessProfile\"
              }
            }"

          # Update the launch template default version
          aws ec2 modify-launch-template \
            --launch-template-name ${LAUNCH_TEMPLATE_NAME} \
            --default-version \$Latest

      - name: Start Instance Refresh
        run: |
          # Start an instance refresh to replace all instances
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}'
